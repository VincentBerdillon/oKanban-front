(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const r of o)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function a(o){const r={};return o.integrity&&(r.integrity=o.integrity),o.referrerPolicy&&(r.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?r.credentials="include":o.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(o){if(o.ep)return;o.ep=!0;const r=a(o);fetch(o.href,r)}})();const d={base_url:"http://localhost:8000",hideModals:function(){const e=document.querySelectorAll(".modal");for(const t of e)t.classList.remove("is-active")}},i={makeTagInDOM:function(e){const t=document.createElement("span");t.classList.add("tag"),t.dataset.tagId=e.id,t.textContent=e.name,t.style.backgroundColor=e.color;const a=document.querySelector(`.box[data-card-id="${e.card_has_tag.card_id}"]`);t.addEventListener("dblclick",i.handleDeleteTag),a.querySelector(".tags").appendChild(t)},showAssociateTagModal:async function(e){const t=e.target.closest(".box"),a=t.dataset.cardId,s=document.getElementById("addTagToCardModal");s.querySelector('input[name="card_id"]').value=a;const o=s.querySelector('select[name="tag_id"]');o.textContent="";try{const r=await fetch(`${d.base_url}/tags`),n=await r.json();if(!r.ok)throw n;if(t.querySelectorAll(".tag").length===n.length)return d.hideModals();for(const f of n){const u=document.createElement("option");u.textContent=f.name,u.value=f.id,o.appendChild(u)}}catch(r){alert("Impossible de récupérer les tags"),console.log(r)}s.classList.add("is-active")},associateToCard:async function(e){e.preventDefault();const t=e.target,a=new FormData(t);try{const s=await fetch(`${d.base_url}/cards/${a.get("card_id")}/tags`,{method:"POST",body:a}),o=await s.json();if(!s.ok)throw o;const r=o.tags.find(n=>n.id===Number(a.get("tag_id")));i.makeTagInDOM(r)}catch(s){alert("Impossible d'associer le tag"),console.log(s)}d.hideModals()},handleDeleteTag:async function(e){const t=e.target,a=t.closest(".box").dataset.cardId,s=t.dataset.tagId;try{const o=await fetch(`${d.base_url}/cards/${a}/tags/${s}`,{method:"DELETE"}),r=await o.json();if(!o.ok)throw r;t.remove()}catch(o){alert("Impossible de supprimer le tag"),console.log(o)}}},c={showAddCardModal:function(e){const t=document.getElementById("addCardModal"),s=e.target.closest(".panel").dataset.listId,o=t.querySelector('input[name="list_id"]');o.value=s,t.classList.add("is-active")},handleAddCardForm:async function(e){e.preventDefault();const t=e.target,a=new FormData(t);try{const s=await fetch(`${d.base_url}/cards`,{method:"POST",body:a}),o=await s.json();if(!s.ok)throw o;c.makeCardInDOM(o)}catch(s){alert("Impossible de créer la carte"),console.log(s)}d.hideModals()},makeCardInDOM:function(e){const t=document.getElementById("template-card"),a=document.importNode(t.content,!0);a.querySelector(".card-name").textContent=e.title;const s=a.querySelector(".box");s.dataset.cardId=e.id,s.querySelector('input[name="card-id"]').value=e.id,s.style.backgroundColor=e.color,s.querySelector('input[name="color"]').value=e.color,s.querySelector(".edit-card-icon").addEventListener("click",c.showEditCardForm),s.querySelector(".edit-card-form").addEventListener("submit",c.handleEditCardForm),s.querySelector(".delete-card-icon").addEventListener("click",c.handleDeleteCard),s.querySelector(".associate-tag-icon").addEventListener("click",i.showAssociateTagModal),document.querySelector(`[data-list-id="${e.list_id}"]`).querySelector(".panel-block").appendChild(a)},showEditCardForm:function(e){const t=e.target.closest(".box");t.querySelector(".card-name").classList.add("is-hidden"),t.querySelector(".edit-card-form").classList.remove("is-hidden")},handleEditCardForm:async function(e){e.preventDefault();const t=e.target,a=new FormData(t),s=t.previousElementSibling;try{const o=await fetch(`${d.base_url}/cards/${a.get("card-id")}`,{method:"PATCH",body:a}),r=await o.json();if(!o.ok)throw r;s.textContent=r.title,t.closest(".box").style.backgroundColor=r.color}catch(o){alert("Impossible de mogifier la carte !"),console.log(o)}t.classList.add("is-hidden"),s.classList.remove("is-hidden")},handleDeleteCard:async function(e){const t=e.target.closest(".box");try{const a=await fetch(`${d.base_url}/cards/${t.dataset.cardId}`,{method:"DELETE"}),s=await a.json();if(!a.ok)throw s;t.remove()}catch(a){alert("Impossible de supprimer la carte!"),console.log(a)}},handleDragCard:function(e){let t=e.from.querySelectorAll(".box");if(c.updateAllCards(t),e.from===e.to)return;t=e.to.querySelectorAll(".box");const a=e.to.closest(".panel").dataset.listId;c.updateAllCards(t,a)},updateAllCards:function(e,t=null){e.forEach(async(a,s)=>{const o=new FormData;o.set("position",s),t&&o.set("list_id",t);try{const r=await fetch(`${d.base_url}/cards/${a.dataset.cardId}`,{method:"PATCH",body:o}),n=await r.json();if(!r.ok)throw n}catch(r){alert("Imossible de déplacer les cartes"),console.log(r)}})}},l={showAddListModal:function(){document.getElementById("addListModal").classList.add("is-active")},handleAddListForm:async function(e){e.preventDefault();const t=e.target,a=new FormData(t);try{const s=await fetch(`${d.base_url}/lists`,{method:"POST",body:a}),o=await s.json();if(!s.ok)throw o;l.makeListInDOM(o)}catch(s){alert("Impossible de créer la liste"),console.log(s)}d.hideModals()},makeListInDOM:function(e){const t=document.getElementById("template-list"),a=document.importNode(t.content,!0),s=a.querySelector("h2");s.textContent=e.name,a.querySelector(".panel").dataset.listId=e.id,a.querySelector("form input[name='list-id']").value=e.id,a.querySelector(".button--add-card").addEventListener("click",c.showAddCardModal),s.addEventListener("dblclick",l.showEditListForm),a.querySelector(".edit-list-form").addEventListener("submit",l.handleEditListForm),a.querySelector(".button--delete-list").addEventListener("click",l.handelDeleteList);const o=a.querySelector(".panel-block");Sortable.create(o,{group:"list",draggable:".box",onEnd:c.handleDragCard}),document.querySelector("#lists-container").appendChild(a)},showEditListForm:function(e){const t=e.target;t.classList.add("is-hidden"),t.nextElementSibling.classList.remove("is-hidden")},handleEditListForm:async function(e){e.preventDefault();const t=e.target,a=new FormData(t),s=t.previousElementSibling;try{const o=await fetch(`${d.base_url}/lists/${a.get("list-id")}`,{method:"PATCH",body:a}),r=await o.json();if(!o.ok)throw r;s.textContent=r.name}catch(o){alert("Impossible de modifier la liste !"),console.log(o)}t.classList.add("is-hidden"),s.classList.remove("is-hidden")},handelDeleteList:async function(e){if(!confirm("Voulez-vous supprimer cette liste ?"))return;const t=e.target.closest(".panel");try{const a=await fetch(`${d.base_url}/lists/${t.dataset.listId}`,{method:"DELETE"}),s=await a.json();if(!a.ok)throw s;t.remove()}catch(a){alert("Impossible de supprimer la liste !"),console.log(a)}},updateDragList:function(e){e.target.querySelectorAll(".panel").forEach(async(a,s)=>{const o=new FormData;o.set("position",s);try{const r=await fetch(`${d.base_url}/lists/${a.dataset.listId}`,{method:"PATCH",body:o}),n=await r.json();if(!r.ok)throw n}catch(r){alert("Impossible de déplacer la liste"),console.log(r)}})}};var m={init:function(){console.log("app init!"),m.addListenerToActions(),m.getListsFromAPI()},addListenerToActions:function(){document.getElementById("addListButton").addEventListener("click",l.showAddListModal);const t=document.querySelectorAll(".close");for(const n of t)n.addEventListener("click",d.hideModals);document.querySelector("#addListModal form").addEventListener("submit",l.handleAddListForm);const s=document.querySelectorAll(".button--add-card");for(const n of s)n.addEventListener("click",c.showAddCardModal);document.querySelector("#addCardModal form").addEventListener("submit",c.handleAddCardForm),document.querySelector("#addTagToCardModal form").addEventListener("submit",i.associateToCard)},getListsFromAPI:async function(){try{const e=await fetch(`${d.base_url}/lists`),t=await e.json();if(!e.ok)throw t;for(const s of t){l.makeListInDOM(s);for(const o of s.cards){c.makeCardInDOM(o);for(const r of o.tags)i.makeTagInDOM(r)}}const a=document.getElementById("lists-container");Sortable.create(a,{draggable:".panel",onEnd:l.updateDragList})}catch(e){alert("Impossible de récupérer les listes de l'API"),console.log(e)}}};document.addEventListener("DOMContentLoaded",m.init);
